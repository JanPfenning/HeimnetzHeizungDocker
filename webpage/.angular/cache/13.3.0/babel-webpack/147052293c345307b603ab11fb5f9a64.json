{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./devices.service\";\nexport let DevicesComponent = /*#__PURE__*/(() => {\n  class DevicesComponent {\n    constructor(service) {\n      this.service = service;\n    }\n\n    ngOnInit() {}\n\n    turnOnUntilEnergy() {\n      //console.log(\"subscribing\")\n      const subscription = this.service.turnDeviceOnUntilOverproductionLessThan('192.168.178.78', 1000).subscribe(data => {//console.log(data)\n      }, error => {//this.serverHealth = -1\n        //console.log(error)\n      }, () => {\n        subscription.unsubscribe();\n      });\n    }\n\n    forceOff() {\n      const subscription = this.service.forceDeviceOffWithIp('192.168.178.78').subscribe(data => {//console.log(data)\n      }, error => {//this.serverHealth = -1\n        //console.log(error)\n      }, () => {\n        subscription.unsubscribe();\n      });\n    }\n\n    forceOn() {\n      const subscription = this.service.forceDeviceOnWithIp('192.168.178.78').subscribe(data => {//console.log(data)\n      }, error => {//this.serverHealth = -1\n        //console.log(error)\n      }, () => {\n        subscription.unsubscribe();\n      });\n    }\n\n  }\n\n  DevicesComponent.ɵfac = function DevicesComponent_Factory(t) {\n    return new (t || DevicesComponent)(i0.ɵɵdirectiveInject(i1.DevicesService));\n  };\n\n  DevicesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DevicesComponent,\n    selectors: [[\"app-devices\"]],\n    decls: 7,\n    vars: 0,\n    consts: [[3, \"click\"]],\n    template: function DevicesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function DevicesComponent_Template_button_click_1_listener() {\n          return ctx.forceOn();\n        });\n        i0.ɵɵtext(2, \"Turn On\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function DevicesComponent_Template_button_click_3_listener() {\n          return ctx.turnOnUntilEnergy();\n        });\n        i0.ɵɵtext(4, \"Turn On until too little energy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function DevicesComponent_Template_button_click_5_listener() {\n          return ctx.forceOff();\n        });\n        i0.ɵɵtext(6, \"Turn Off\");\n        i0.ɵɵelementEnd()();\n      }\n    },\n    styles: [\"\"]\n  });\n  return DevicesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}